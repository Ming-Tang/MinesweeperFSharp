<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Minesweeper</name></assembly>
<members>
<member name="T:SHiNKiROU.Minesweeper.BacktrackingSolver.Solution">
<summary>
 A list of booleans (true for mine and false for no mine),
 representing a solution, indexed by an Index
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.BacktrackingSolver.VirtualBoard">
<summary>
 A board with only information given to the player
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.BacktrackingSolver.Entry">
<summary>
 A dependency statement: squares in the Set&lt;Coordinate&gt; depends on the Coordinate
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.BacktrackingSolver.slnlist(System.Boolean,Microsoft.FSharp.Collections.FSharpList{System.Boolean[]},System.Tuple`2{System.Tuple`2{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpSet{System.Tuple`2{System.Int32,System.Int32}}}[])">
<summary>
 Count the probability of mines, based on the formula
 prob of mines of a square = number of mines / number of solutions
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.BacktrackingSolver.commons(Microsoft.FSharp.Collections.FSharpList{System.Boolean[]})">
<summary>
 Find squares that is 100% sure about what is under there.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.BacktrackingSolver.backtrack(System.Boolean,SHiNKiROU.Minesweeper.Board.Board,System.Tuple`2{System.Tuple`2{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpSet{System.Tuple`2{System.Int32,System.Int32}}}[])">
<summary>
 Find a solution by backtracking.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.BacktrackingSolver.index(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Provides statements about the board in the format of (COORD OF UNKNOWN, DEPENDENT SQS),
 which serves as an index for solution slots.
</summary>
</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.BacktrackingSolver">

</member>
<member name="">

</member>
<member name="F:SHiNKiROU.Minesweeper.Board.Board.Count">
<summary>
 Number of mines
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="F:SHiNKiROU.Minesweeper.Board.Board.Board">
<summary>
 Numbering part: never change
</summary>
</member>
<member name="F:SHiNKiROU.Minesweeper.Board.Board.Flags">
<summary>
 Digging part: can change
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.Board.Board">
<summary>
 Repersents a Minesweeper board
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.Board.SolutionList">
<summary>
 Represents a list of squares to be flagged/opened or is likely to be a mine as told by a solver
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.Board.SolutionSquare">
<summary>
 Represents the information about a square as gathered by a solver
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.Board.Coordinate">
<summary>
 A coordinate
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.Board.Flag">
<summary>
 Represents the marking of a square: flag, digged (Open) and buried (Close).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.Board.BoardState">
<summary>
 Represents the state of the game: playing, win and lose
</summary>
</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.Board.newBoardNow(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Initializes a new board with specified initial click
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.newBoard(System.Int32,System.Int32,System.Int32)">
<summary>
 Constructs a new Board record with empty squares.
</summary>
</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.Board.toggle(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Toggles a flag.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.unflag(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Unflags a square.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.flag(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Flags a square.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.probe(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Digs a square, without returning the list of changed squares.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.probeList(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Digs a square, returns a list of all changed squares.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.checkState(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 If the game is over, throw an exception.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.bury(System.Int32,System.Int32)">
<summary>
 Create an array of buried squares
</summary>
</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.Board.aroundEach(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{SHiNKiROU.Minesweeper.Board.Flag,Microsoft.FSharp.Core.FSharpFunc`2{System.Byte,Microsoft.FSharp.Core.Unit}}}},System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Iterates around a square.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.toBeFlagged(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Returns the number of to be flagged left.
</summary>
</member>
<member name="">

</member>
<member name="P:SHiNKiROU.Minesweeper.Board.solved">
<summary>
 Check if the board is solved.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.forallSquares(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{SHiNKiROU.Minesweeper.Board.Flag,Microsoft.FSharp.Core.FSharpFunc`2{System.Byte,System.Boolean}}}},SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Checks if p is true for all squares on the board.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.textFormat(System.Boolean,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Formats a board into console-friendly text representation.
 If the first argument, zeroBase is true, the counting
 scale will start from zero. (otherwise, one)
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.checkIndex(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Checks coordinate of the square being operated on
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.labeledBoard(System.Int32,System.Int32,System.Boolean[0:,0:])">
<summary>
 Internal: Label the board generated by boolBoard with numbers.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.boolBoard(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Internal: Generates a 2D boolean array,
 of the specified number of mines.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.around(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Returns a sequence of all squares around a coordinate.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:SHiNKiROU.Minesweeper.Board.INVALID">
<summary>
 Represents an invalid square: Used in an uninitalized board.
</summary>
</member>
<member name="P:SHiNKiROU.Minesweeper.Board.MINE">
<summary>
 Represents a square with a mine in it.
</summary>
</member>
<member name="P:SHiNKiROU.Minesweeper.Board.EMPTY">
<summary>
 Represents a square with no mines around it.
</summary>
</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.Board.BoardException">
<summary>
 Used in some board operations
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.Board">

</member>
<member name="M:SHiNKiROU.Minesweeper.CountingSolver.iteration(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 determines the solution and modifies the board
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.CountingSolver.solutions(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 solution set
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.CountingSolver.counting(System.Boolean,SHiNKiROU.Minesweeper.Board.Board,Microsoft.FSharp.Collections.FSharpSet{System.Tuple`2{System.Byte,Microsoft.FSharp.Collections.FSharpSet{System.Tuple`2{System.Int32,System.Int32}}}})">
<summary>
 Find a set of squares by counting
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.CountingSolver.index(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Provides statements about the board in the format of (NUMBER OF MINES, AMONG THESE SQUARES)
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.CountingSolver">

</member>
</members>
</doc>
