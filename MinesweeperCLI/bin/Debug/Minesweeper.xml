<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Minesweeper</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.BacktrackSolver.mineProbs(Microsoft.FSharp.Collections.FSharpList{System.Boolean[]})">
<summary>
 Count the probability of mines, based on the formula
 prob of mines of a square = number of mines / number of solutions
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.BacktrackSolver.commons(Microsoft.FSharp.Collections.FSharpList{System.Boolean[]})">
<summary>
 Find squares that is 100% sure about what is under there.
</summary>
</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.BacktrackSolver.index(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Indexes the association list.
</summary>
</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.BacktrackSolver">

</member>
<member name="">

</member>
<member name="F:SHiNKiROU.Minesweeper.Board.Board.Count">
<summary>
 Number of mines
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="F:SHiNKiROU.Minesweeper.Board.Board.Board">
<summary>
 Numbering part: never change
</summary>
</member>
<member name="F:SHiNKiROU.Minesweeper.Board.Board.Flags">
<summary>
 Digging part: can change
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.Board.Board">
<summary>
 Repersents a Minesweeper board
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.Board.Flag">
<summary>
 Represents the marking of a square: flag, digged (`Open`) and buried (`Close`).
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:SHiNKiROU.Minesweeper.Board.BoardState">
<summary>
 Represents the state of the game: playing, win and lose
</summary>
</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.Board.newBoardNow(System.Int32,System.Int32,System.Int32)">
<summary>
 Initializes a new board regardless of the initial clicks.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.newBoardNow'(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Initializes a new board with specified initial click
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.newBoard(System.Int32,System.Int32,System.Int32)">
<summary>
 Constructs a new Board record with empty squares.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.toggle(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Toggles a flag.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.unflag(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Unflags a square.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.flag(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Flags a square.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.probe(System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Digs a square, returns a list of all changed squares.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.checkState(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 If the game is over, throw an exception.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.bury(System.Int32,System.Int32)">
<summary>
 Create an array of buried squares
</summary>
</member>
<member name="">

</member>
<member name="M:SHiNKiROU.Minesweeper.Board.aroundEach(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{SHiNKiROU.Minesweeper.Board.Flag,Microsoft.FSharp.Core.FSharpFunc`2{System.Byte,Microsoft.FSharp.Core.Unit}}}},System.Int32,System.Int32,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Iterates around a square.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.toBeFlagged(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Returns the number of to be flagged left.
</summary>
</member>
<member name="P:SHiNKiROU.Minesweeper.Board.solved">
<summary>
 Check if the board is solved.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.forallSquares(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{SHiNKiROU.Minesweeper.Board.Flag,Microsoft.FSharp.Core.FSharpFunc`2{System.Byte,System.Boolean}}}},SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Checks if `p` is true for all squares on the board.
 If `p` raises `ForallBreak`, break the iteration and return false.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.textFormat(System.Boolean,SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Formats a board into console-friendly text representation.
 If the first argument, `zeroBase` is true, the counting
 scale will start from zero. (otherwise, one)
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.labeledBoard(System.Int32,System.Int32,System.Boolean[0:,0:])">
<summary>
 Internal: Label the board generated by `boolBoard` with numbers.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.boolBoard(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Internal: Returns a 2D array of boolean,
 representing the location of the mines.
</summary>
</member>
<member name="M:SHiNKiROU.Minesweeper.Board.around(SHiNKiROU.Minesweeper.Board.Board)">
<summary>
 Returns a sequence of all squares around a coordinate.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:SHiNKiROU.Minesweeper.Board.INVALID">
<summary>
 Represents an invalid square: Used in an uninitalized board.
</summary>
</member>
<member name="P:SHiNKiROU.Minesweeper.Board.MINE">
<summary>
 Represents a square with a mine in it.
</summary>
</member>
<member name="P:SHiNKiROU.Minesweeper.Board.EMPTY">
<summary>
 Represents a square with no mines around it.
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.Board.ForallBreak">
<summary>
 Used in `forallSquares` to break the iteration
</summary>
</member>
<member name="T:SHiNKiROU.Minesweeper.Board">

</member>
</members>
</doc>
